import Reader from '../document-reader/reader';
import DocumentSession from '../document-session/document-session';
import DocumentWriter from '../document-writer/document-writer';
import { EventEmitter } from '../events';
import { HighlighterSchema } from '../highlighter';
import { SerachResults } from '../search';
import { Point, Selection } from '../selection';
import SelectionHistory from '../selection/selection-history';
import SelectionManager from '../selection/selection-manager';
import WrapData from '../wrapper/wrap-data';
import Wrapper from '../wrapper/wrapper';
import { EditSessionEvents } from './events';
export default class EditSession extends EventEmitter<EditSessionEvents> {
    private _id;
    private _documentSession;
    private _highlightingSchema;
    private _searchResults;
    private _selectionManager;
    private _selectionHistory;
    private _reader;
    private _writer;
    private _wrapper;
    private _wrapData;
    private _searchAfterEdit;
    private _shouldUpdateSelections;
    private _useWrapData;
    private _visibleColumnsCount;
    letterWidth: number;
    constructor(documentSession: DocumentSession);
    get id(): string;
    get reader(): Reader;
    get writer(): DocumentWriter;
    get selections(): SelectionManager;
    get history(): SelectionHistory;
    get searchResults(): SerachResults;
    get documentSession(): DocumentSession;
    get highlightingSchema(): HighlighterSchema;
    get wrapper(): Wrapper;
    get wrapData(): WrapData;
    get isWrapEnabled(): boolean;
    get visibleColumnsCount(): number;
    private get _document();
    updateLinesSearchResults(firstLine: number): void;
    updateSelctions(line: number, offset: number, lineDiff: number, offsetDiff: number): void;
    search(phrase: string): void;
    getSelctions(): Selection[];
    setSelection(selection: Selection): void;
    addSelection(selection: Selection): void;
    extendLastSelection(point: Point): void;
    selectAll(): void;
    collapseSelectionToLeft(): void;
    collapseSelectionToRight(): void;
    collapseSelectionToTop(): void;
    collapseSelectionToBottom(): void;
    collapseSelectionToHome(): void;
    collapseSelectionToEnd(): void;
    selectWordBefore(): void;
    selectWordAfter(): void;
    selectWordAt(point: Point, addSelection: boolean): void;
    selectStartOfTheLine(): void;
    selectEndOfTheLine(): void;
    moveSelectionWordBefore(): void;
    moveSelectionWordAfter(): void;
    emitSelectionChangedEvent(): void;
    enableSelectionsUpdates(): void;
    disableSelectionsUpdates(): void;
    getActiveLinesNumbers(firstLine?: number, linesCount?: number): Set<number>;
    getSelectedLinesCount(): number;
    extendRectangleSelection(point: Point): void;
    getSearchPhrase(): string;
    getSearchMatchCount(): number;
    private _emitSelectionChangedEvent;
    undo(): void;
    redo(): void;
    enableWrap(): void;
    disableWrap(): void;
    setVisibleColumnsCount(count: number): void;
}
