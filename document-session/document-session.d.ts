import DocumentHistory from '../document-history/document-history';
import Document from '../document/document';
import { EventEmitter } from '../events';
import { Mode } from '../mode';
import { Search } from '../search';
import TokenizerData from '../tokenizer/tokenizer-data';
import { DocumentSessionEvents } from './events';
export default class DocumentSession extends EventEmitter<DocumentSessionEvents> {
    private _id;
    private _document;
    private _tokenizerData;
    private _mode;
    private _search;
    private _documentHistory;
    private _updateTokensAfterEdit;
    private _shouldEmitLinesCountChangeEvent;
    private _shouldEmitEditEvent;
    constructor(document: Document, mode?: Mode | null, tokenizerData?: TokenizerData | null);
    get id(): string;
    get document(): Document;
    get tokenizerData(): TokenizerData;
    get mode(): Mode;
    set mode(value: Mode);
    get search(): Search;
    get modeName(): string;
    get history(): DocumentHistory;
    updateLinesTokens(firstLine: number): void;
    setMode(modeName: string): void;
    emitLinesCountChanged(lineDiff: number): void;
    emitEditEvent(): void;
    tokenize(): void;
    enableTokenization(): void;
    disableTokenization(): void;
    enableEditEvent(): void;
    disableEditEvent(): void;
    enableLinesChangedEvent(): void;
    disableLinesChangedEvent(): void;
    emitInitEvents(): void;
    undo(): void;
    redo(): void;
}
